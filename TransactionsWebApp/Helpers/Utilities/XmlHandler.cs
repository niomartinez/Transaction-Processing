using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Transaction_Processing.Models;
using TransactionsWebApp.Data;
using TransactionsWebApp.Data.Repositories;
using TransactionsWebApp.Helpers.LogService;
using TransactionsWebApp.Models;

namespace TransactionsWebApp.Helpers.Utilities
{
    public class XmlHandler : FileHandler, IXmlHandler
    {

        private readonly ApplicationDbContext _context;
        private readonly ITransactionRepository _transRepo;
        private readonly ILogger _logger;

        public XmlHandler(ApplicationDbContext context, ILogger logger, ITransactionRepository transRepo)
        {
            _context = context;
            _logger = logger;
            _transRepo = transRepo;
        }

        public async Task<(bool, string)> ProcessXmlAsync(IFormFile file)
        {
            Transactions transactions = new();//object that is a list of transactions
            //string xml = File.ReadAllText(await GetTempFilePath(file));//returns string from xml file
            XmlSerializer xs = new XmlSerializer(typeof(Transactions));
            //read File
            #region Read XML
            using (FileStream stream = File.Open(await GetTempFilePath(file), FileMode.Open))
            {
                transactions = (Transactions)xs.Deserialize(stream);
            }
            #endregion
            //Validate File per record
            #region Validate CSV per Record
            int counter = 1;
            List<List<string>> validations = new();
            foreach (Transaction trans in transactions.Transaction)
            {
                if (ValidateTransaction(trans, file, counter).Item1)
                {
                    validations.Add(ValidateTransaction(trans, file, counter).Item2);
                }
                counter++;
            }
            #endregion 
            // Create and insert transactions
            #region No Validations
            if (validations.Count <= 0)// file has no validations
            {
                int index = 0;
                foreach (Transaction trans in transactions.Transaction)
                {
                    BaseTransaction transactionModel = new()
                    {
                        TransIdentifier = trans.Id,
                        Amount = trans.PaymentDetails.Amount,
                        Currency = trans.PaymentDetails.CurrencyCode,
                        TransDate = trans.TransactionDate,
                        Status = trans.Status

                    };
                    _context.Add(transactionModel);
                    await _context.SaveChangesAsync();
                    index++;
                }
                return (true, String.Empty);
            }
            #endregion
            //Return and log Validations
            #region Has Validations
            else
            {
                string valMsg = "Bad Request: CSV Validation(s) below: " + Environment.NewLine;
                foreach (List<string> list in validations)
                {
                    foreach (string s in list)
                    {
                        valMsg += s;
                    }
                    valMsg += Environment.NewLine;
                }
                valMsg += "Refer to application logs for more details. (C:\\Users\\{UserName}\\Documents\\TransactionServiceLogs)" + Environment.NewLine;
                return (false, valMsg);
            }
            #endregion
        }

        public async Task<string> GetTempFilePath(IFormFile file)
        {
            string filePath = Path.GetTempFileName();
            using (var stream = System.IO.File.Create(filePath))
            {
                // The formFile is the method parameter which type is IFormFile
                // Saves the files to the local file system using a file name generated by the app.
                await file.CopyToAsync(stream);
            }
            return filePath;
        }

        public (bool, List<string>) ValidateTransaction(Transaction trans, IFormFile file, int counter)
        {
            #region Record validation method
            List<string> validations = new();
            bool hasValidation = false;
            string valMsg;
            //TransIdentifier is Null, Empty, Or whitespace
            if (string.IsNullOrWhiteSpace(trans.Id.ToString()) || string.IsNullOrEmpty(trans.Id.ToString()))
            {
                valMsg = "Transaction Identifier is blank or empty." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //TransIdentifier Exists in DB
            Expression<Func<BaseTransaction, bool>> filter = (e) => e.TransIdentifier == trans.Id;
            var opp = _transRepo.RetrieveAll(filter);
            if (opp.Count != 0)
            {
                valMsg = "Record already exists: " + trans.Id.ToString() + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //TransIdentifier char is > 50
            if (trans.Id.ToString().Length > 50)
            {
                valMsg = "Transaction Identifier exceeded maximum of 50 characters." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //Amount is Null, Empty, Or whitespace
            if (string.IsNullOrWhiteSpace(trans.PaymentDetails.Amount.ToString()) || string.IsNullOrEmpty(trans.PaymentDetails.Amount.ToString()))
            {
                valMsg = "Amount is blank or empty." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //Amount is not in decimal format
            if (!decimal.TryParse(trans.PaymentDetails.Amount.ToString(), out _))
            {
                valMsg = "Amount is not in a decimal format." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //Currency is Null, Empty, Or whitespace
            if (string.IsNullOrWhiteSpace(trans.PaymentDetails.CurrencyCode.ToString()) || string.IsNullOrEmpty(trans.PaymentDetails.CurrencyCode.ToString()))
            {
                valMsg = "Currency is blank or empty." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //Currency is not in ISO4217 format
            IEnumerable<string> currencySymbols = CultureInfo.GetCultures(CultureTypes.SpecificCultures)
                    .Select(x => (new RegionInfo(x.LCID)).ISOCurrencySymbol)
                    .Distinct()
                    .OrderBy(x => x);

            if (!currencySymbols.Any(stringToCheck => stringToCheck.Contains(trans.PaymentDetails.CurrencyCode.ToString())))
            {
                valMsg = "Currency is not in ISO2417 Format." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //DateTime is Null, Empty, Or whitespace
            if (string.IsNullOrWhiteSpace(trans.TransactionDate.ToString()) || string.IsNullOrEmpty(trans.TransactionDate.ToString()))
            {
                valMsg = "Transaction Date is blank or empty." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //DateTime is not in decimal format
            if (!System.DateTime.TryParseExact(trans.TransactionDate.ToString(), "s", null, DateTimeStyles.None, out _))
            {
                valMsg = "Transaction Date is not in a correct DateTime format. (yyyy-MM-ddThh:mm:ss)" + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }

            //Status is Null, Empty, Or whitespace
            if (string.IsNullOrWhiteSpace(trans.Status.ToString()) || string.IsNullOrEmpty(trans.Status.ToString()))
            {
                valMsg = "Date is blank or empty." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            //Status is invalid
            if (!Enum.TryParse<XmlStatuses>(trans.Status.ToString(), out _))
            {
                valMsg = "Status is invalid or not defined for XML Statuses." + Environment.NewLine;
                Log(trans, valMsg, file, counter);
                validations.Add(valMsg);
                hasValidation = true;
            }
            return (hasValidation, validations);
            #endregion
        }

        public void Log(Transaction trans, string valMsg, IFormFile file, int counter)
        {
            #region Logging
            _logger.Log("Invalid Record from File " + file.FileName + ": " + Environment.NewLine +
                       "Exception: " + valMsg + " on row: " + counter + Environment.NewLine +
                       JsonConvert.SerializeObject(trans) + Environment.NewLine);
            #endregion
        }
    }
}
